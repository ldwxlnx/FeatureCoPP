<?xml version="1.0"?>
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Author: Kai Ludwig 2017-03-15
Comment: This script is for a free usage and it is
furthermore not limited by any licensing/copyright-issues
by the author! You can distribute/modify/delete/whatever;-)

1.) Introduction
================
A simple ant-script generating scanner/parser sources
depending on submitted specification-files. It was
tested on Apache Ant(TM) version 1.8.2 with the fol-
lowing deployment-folder hierarchy
Structure:			Description:
[PROJECT-FOLDER]
	|-> [specs]				// folder, where lexer and parser specifications reside
		| ->  build.xml 	// this file
	|-> [src]				// where you store additional code
							// and where generated files are
							// deployed
							// -> changeable
	|-> [bin]				// compiled output
	|-> [data]				// additional files e.g. your
							// scanner/parser-specifications
							// -> changeable
	|-> [doc]				// all your documentation 				
As you can see this perfectly fits to the default
eclipse-project-structure, which was actually the goal
to achieve. The idea is, to place your files within the
folders mentioned above and simply press "Run As ->..."
..."Ant Build" to generate all files needed by your
parser-invocating codebase. Since we use the provided
Ant-tasks from JCup and JFlex projects and we introduce
the appropriate locations of those tasks (within the ship-
ped jarfiles) you DO NOT NEED to introduce those tasks
to the eclipse-ant-task-configuration-system. Have a
closer look on the following property definitions, where
we define some variables for this buildfile. You`re OUGHT
to adjust appropriate values according to your project-
environment ONLY there. So there is NO need to tamper the
adjustments within tasks and targets.

2.) Usage
=========

2a) Eclipse
Assuming you already set up a new Javaproject and you have
the standard structure consisting of src/bin-folders.
Furthermore you already deployed your specification-files,
adapted the correct filenames in the properties below and
copied this file within your projects' mainfolder.
Simply click the arrowed-context-button next to the
"Run As"-button and select there "Run as" -> Ant Build!
The output of this script is sent to the eclipse-console.

2b) Other
Open a virtual terminal (CMD/XTerm/...) and change into
your project directory. There enter ant on the command-
prompt and enjoy running this script.

3.) Hints
=========
Consider the ant-flag '-p' which shows you all targets
defined in this script. So then you can play a little
by using only special targets like 'clean' etc.  
+++++++++++++++++++++++++++++++++++++++++++++++++++-->
	
<project name="MyCupBuild" default="all" basedir=".">
	<!-- SETTING UP SOME VARS DUE TO CENTRALIZED CHANGES -->
	<!-- access to OS-environment-variables -->
	<property environment="env"/>
	<!-- where our custom binaries reside -->
	<property name="bin_dir" value="${env.HOME}/bin"/>
	<!-- parent directory of basedir - necessary for output_dir (cup) instead of '..' as basedir -->
	<property name="parent.path" location="${basedir}/../../"/>
	<!-- where our project related libraries reside -->
	<property name="lib_dir" value="${parent.path}/lib"/>
	<!-- where our specification-files reside (avoid absolute pathnames!) -->
	<property name="spec_dir" value="${parent.path}/specs/cpp_analyzer"/>
	<!-- where to store generated sourcefiles (think of src/bin-structures in eclipse!)-->
	<property name="output_dir" value="${parent.path}/src/de/ovgu/spldev/featurecopp/lang/cpp"/>
	<!-- scanner generates outputfolders according to package-spec, therefore only parent ofbasedir -->
	<property name="scanner_output_dir" value="${parent.path}/src"/>
	<!-- declare scanner task -->

	<property name="scanner_task_class" value="jflex.anttask.JFlexTask"/>
	<!-- where is the archive the above class is stored within -->
	<property name="scanner_task_binaries" value="${lib_dir}/jflex-1.6.1.jar"/>
	<!-- filename of our scanner-specification -->
	<property name="scanner_spec" value="${spec_dir}/cpp_analyzer.flex" />
	<!-- destination package -->
	<property name="package_name" value="de.ovgu.spldev.featurecopp.lang.cpp"/>
	<!-- files generated by scanner -->
	<fileset id="gen_scannerfiles" dir="${output_dir}" casesensitive="yes">
	  <include name="Lexer.java"/>
	</fileset>

	<!-- DECLARE SCANNER-GENERATION-TASK -->
	<taskdef name="jflex" classname="${scanner_task_class}">
		<classpath>
			<pathelement location="${scanner_task_binaries}"/>
		</classpath>
	</taskdef>

	<!-- LIKE MAKE ALL -> RUN THE WHOLE TOOLCHAIN -->
	<target name="all" description="deletes generated sources, then generates scanner/parser" depends="clean,jflex">	
	</target>
	
	<!-- SETUP SCANNER - only certain cmdline switches are implemented, see jflex-ant-doc-->
	<target name="jflex" description="generates scanner based on specification">
		<!--JFlex respects package-decls within its usercode-section but generates
			a recursive folder structure according to package. Therefore we have to
			subtract all package-folders from outputdir specifically for scanner--> 
		<jflex file="${scanner_spec}" destdir="${scanner_output_dir}" verbose="on" dump="off" />
	</target>
	
	<!-- DELETE EVERYTHING ALREADY BUILT -->
	<target name="clean" description="deletes all generated files">
		<delete verbose="true">
			<fileset refid="gen_scannerfiles"/>
		</delete>
	</target>
</project>