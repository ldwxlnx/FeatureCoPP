/********************************************************************************
 FeatureCoPP Program Configuration
 =================================
 
 This configuration file controls the behavior of FeatureCoPP processing.
 It can be used for processing single and multiple projects in different
 flavors at a time.
 
 I. Syntax Rules
 ===============
 a) BNF File Structure
 ---------------------
 // a config file has to provide at least a gloabl directive
 <CONFIG_FILE> ::= <GLOBAL_CONFIG>
 
 b) BNF Configurations
 ---------------------
 // global directives have to occur before local configurations 
 <GLOBAL_CONFIG> ::= 'global' '{' <GLOBAL_OPT_DIRECTIVES> <CONFIGS> '}' ';'
 
 // an arbitrary length (even empty) set of local configurations is allowed
 <CONFIGS> ::=  <CONFIGS> <CONFIG> | empty
 
 <CONFIG> ::= <IDENTIFIER> '{' <LOCAL_DIRECTIVES> '}' ';'
 
 c) BNF Directives
 -----------------
  // all global directives are optional
 <GLOBAL_OPT_DIRECTIVES> ::= <GLOBAL_OPT_DIRECTIVES><GLOBAL_OPT_DIRECTIVE> ';'
 	| empty

 // all global directives are optional	
 <GLOBAL_OPT_DIRECTIVE> ::= <LOCAL_MANDATORY_DIRECTIVE>
 	| <LOCAL_OPTIONAL_DIRECTIVE>
 
 // a local configuration has to provide at least the (leading) mandatory directive...
 <LOCAL_DIRECTIVES> ::= <LOCAL_DIRECTIVES> <LOCAL_OPTIONAL_DIRECTIVE> ';'
 	| <LOCAL_MANDATORY_DIRECTIVE> ';'
 
 // ..., which is an input folder
 <LOCAL_MANDATORY_DIRECTIVE> ::= <INPUTDIR>
 
 <LOCAL_OPTIONAL_DIRECTIVE> ::=  <BLACKLIST> | <DEBUG> | <FILETYPE> | <LOGDIR>
 	| <LOGPRFX> | <LOGROTATE> | <MACROPATTERN> | <MODE>
 	
 <BLACKLIST> ::= 'blacklist' '{' <BLACKLIST_FILES> '}'

 // at least one file entry is required
 <BLACKLIST_FILES> ::= <BLACKLIST_FILES> <BLACKLIST_FILE> | <BLACKLIST_FILE>
 <BLACKLIST_FILE> ::= <STRING> ';'
 
 // merge mode needs to know where original sources are stored
 <MERGE_DIRECTIVE> ::= 'original' '=' <STRING> ';'
 
 <DEBUG> ::= 'debug' '=' <NATURAL_DECIMAL_NUMBER>
 // string is a java regular expression for file suffixes
 <FILETYPE> ::= 'filetype' '=' <STRING>
 // string is a (path to a) accessible directory 
 <INPUTDIR> ::= 'input' '=' <STRING>
 // string is a (path to a) writable directory
 <LOGDIR> ::= 'logdir' '=' <STRING>
 // string is a prefix prepended to logfile name
 <LOGPRFX> ::= 'logprefix' '=' <STRING>
 // 0 means no rotation and n a rotation of n + 1 files
 <LOGROTATE> ::= 'logrotate' '=' <NATURAL_DECIMAL_NUMBER>
 // string is a java regular expression for object macro names
 <MACROPATTERN> ::= 'macropattern' '=' <STRING>
 <MODE> ::= 'mode' '=' <MODE_LITERAL>
 
 // local configuration names
 <IDENTIFIER> :: [A-Za-z_][A-Za-z0-9_]*
 
 // d) Literals
 <STRING> ::= '"' 'char_sequence' '"'
 <NATURAL_DECIMAL_NUMBER> ::= 0 | [1-9][0-9]+
 <MODE_LITERAL> ::= 'areport' | 'asplit' | 'merge' '{' <MERGE_DIRECTIVE> '}' | 'report' | 'split'
 
 d) COMMENTS
 -----------
 C-style comments can be used to document configurations and/or directives.
 All comments are detected on the lexical layer and syntactically ignored.
 Valid comments are:
 - Multi-line comments '/''*'<TEXT>'*''/', where <TEXT> is an arbitrary sequence of
   characters, including line breaks. Multi-line comments must not be nested!
 - Single-line comments '/''/'<TEXT><LINEBREAK>, rendering only a single text line
   as a comment. Single-line comments can occur within multi-line comments.
   See this example configuration, for possible usages.

 II.) Semantics
 ==============
 a) Basic Concepts
 -----------------
 FeatureCoPP provides a configuration file facility to minimize complexity of program
 invocation, and to allow fine-grained adjustments for program executions by the user.
 A configuration file has to follow certain lexical and syntax requirements (cf. Sec. I
 "SYNTAX RULES" above). A configuration file is rejected by the FeatureCoPP's Lexer
 or Parser if these requirements are not met. In such case, a further program execution
 is impossible.

 If no configuration file is specified by the user, FeatureCoPP is executed based on
 configuration values hard-coded within the application (cf. Sec. IIf "Default Values").

 A global configuration refines default settings with each set optional configuration
 directive. If only a global configuration is provided, FeatureCoPP's execution is based
 on all the given directives and falls back to default values, in case, certatin directives
 were omitted.
 
 If one or more local directives exist, FeatureCoPP processes each local directive in
 a batch mode, using the global directive only as configuration provider, i.e., no extra
 execution is performed for the global setting alone. Hence, each local directive has to
 provide at least a mandatory 'input'-directive. A local directive can override its global
 counterpart. This leads to the following binding chain:
 -> useIfExist(local) -> otherwise_useIfExist(global) -> otherwise_useIfExist(default).
 
 Within a configuration same directives can appear repeatedly. In such cases, the value
 of the last directive overwrites the value of the respective predecessor.

d) Reserved Words
-----------------
The following words are involved in lexical recognition and, therefore, are allowed
only within strings (i.e., in double quoted values) but prohibited anywhere else:

'areport', 'asplit', 'blacklist', 'debug', 'filetype', 'input', 'logdirectory', 'logprefix',
'logrotate', 'macropattern', 'merge', 'mode', 'original', 'report', 'split'

e) Variables
------------
Variables can be set, to make configuration directives more portable between different platforms.
Variables are case-sensitive and can only appear within string values (enclosed
in double quotes). Currently, the following variables are available:

${HOME}	user's home directory, set to JVM (cf. System.getProperty("user.home") )
${TMP}	system's temporary directory, set to JVM (cf. System.getProperty("java.io.tmpdir") ) 
${USER}	user's name, set to JVM (cf. System.getProperty("user.name") )
${PROG} application name FeatureCoPP, hardcoded in application
${CWD}	current working directory of application (cf.  System.getProperty("user.dir") )

f) Default Values
-----------------
If a configuration value is neither set in global or local configuration, the
following explicit default values are assumed:
blacklist ::= empty
debug ::= 0 // off
filetype ::= "^(\w|-)+\.[hc]" // all alnum/dash named header/implementation files
input ::= "${CWD}"
logdirectory = "${CWD}"
logprefix = ${PROG} // i.e., FeatureCoPP
logrotate = 3 // one active plus two backlogs
macropattern = .* // anything
mode = report // the least time/disk space consuming

Moreover, the following implicit default values are generated:
logfile = <logdirectory>/<logprefix>_<IDENTIFIER>.%d.log


g) Additional Remarks
---------------------
Escape characters in regular expressions need/must not be additionally escaped.


 
*********************************************************************************/
/*
 * Holds for any project, except for overriding keys in project-specific
 * configurations. If omitted, application built-in default value hold.
 */
global {
	// MANDATORY SECTION -- input directive has to occur first!
	input = "${CWD}/test_unix";
	// OPTIONAL SECTION -- an arbitrary amount of optional directives can follow!
	debug = 1;
	//filetype = "^(\w|-)+\.[hc]";
	//logrotate = 5;
	//mode = report;	
	/**** linux specific configuration ****/
	linux {
		input = "${HOME}/Downloads/fc_projects/linux-4.10.4/";
		debug = 0;
		macropattern = "CONFIG_\w+";
		//logdirectory = "/usr"; // not writable on test system
	};
	/*
	apache {
		input = "${HOME}"; 
		logdirectory = "${TMP}/${PROG}_${USER}/";
		// error, due to missing priviledges - if non-root user 
		// input = "/root";		
		logprefix = "myprefix_";
		// an natural number, where 0 means no rotation		
		// logrotate = -1; // lexical error, due to signed number
		logrotate = 4711;
		// last entry overwrites predecessor
		logrotate = 6;
		// one of {report,split,areport,asplit,merge} without double quotes (reserved words!)
		mode = merge;
		
	};
	// invalid! 'global' is reserved
	//global {
	//	input = "schnarf";
	//};
	// first entry serves first - duplicate is ignored
	apache {
		input = "/home/miniztree/Downloads/fc_projects/apache-2.4.9";
	};
	*/
};