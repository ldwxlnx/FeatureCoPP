
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 31 07:33:03 CET 2018
//----------------------------------------------------

package de.ovgu.spldev.featurecopp.config;

import java_cup.runtime.*;
import de.ovgu.spldev.featurecopp.config.Configuration.UserConf;
import java.util.HashSet;
import java.util.Deque;
import java.util.ArrayDeque;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 31 07:33:03 CET 2018
  */
public class ConfigParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConfigParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConfigParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConfigParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\003\000\002\002\004\000\002\030" +
    "\002\000\002\003\011\000\002\004\005\000\002\004\002" +
    "\000\002\005\003\000\002\005\003\000\002\010\005\000" +
    "\002\010\004\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\023\005\000\002\015\005\000\002\013\005\000" +
    "\002\017\005\000\002\020\005\000\002\021\005\000\002" +
    "\016\005\000\002\022\005\000\002\014\005\000\002\024" +
    "\006\000\002\025\004\000\002\025\003\000\002\026\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\007\000\002\006\004\000\002" +
    "\006\002\000\002\031\002\000\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\010\004\001\002\000\004\004\uffff\001" +
    "\002\000\004\002\001\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\004\011\001\002\000" +
    "\030\005\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\001\002\000" +
    "\030\005\uffdb\011\uffdb\012\030\014\024\015\036\016\022" +
    "\017\016\020\017\021\026\022\035\024\031\001\002\000" +
    "\004\006\ufff0\001\002\000\004\006\ufff2\001\002\000\004" +
    "\006\ufff3\001\002\000\004\007\120\001\002\000\004\007" +
    "\116\001\002\000\004\006\ufff5\001\002\000\004\006\ufff6" +
    "\001\002\000\004\007\114\001\002\000\004\006\ufff4\001" +
    "\002\000\004\007\112\001\002\000\004\006\uffef\001\002" +
    "\000\004\007\074\001\002\000\004\006\ufff7\001\002\000" +
    "\004\007\072\001\002\000\004\004\063\001\002\000\004" +
    "\006\ufff1\001\002\000\004\006\ufffb\001\002\000\004\006" +
    "\062\001\002\000\004\007\060\001\002\000\004\007\056" +
    "\001\002\000\006\005\041\011\042\001\002\000\004\006" +
    "\ufffa\001\002\000\004\006\055\001\002\000\004\004\uffda" +
    "\001\002\000\006\005\uffdc\011\uffdc\001\002\000\004\004" +
    "\045\001\002\000\004\012\030\001\002\000\004\006\054" +
    "\001\002\000\024\005\050\014\024\015\036\016\022\017" +
    "\016\020\017\021\026\022\035\024\031\001\002\000\004" +
    "\006\053\001\002\000\004\006\052\001\002\000\024\005" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\024\ufff9\001\002\000\006\005\uffd9\011\uffd9\001" +
    "\002\000\024\005\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\024\ufff8\001\002\000\004\002" +
    "\ufffe\001\002\000\004\023\057\001\002\000\004\006\uffe8" +
    "\001\002\000\004\025\061\001\002\000\004\006\uffee\001" +
    "\002\000\030\005\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\001" +
    "\002\000\004\023\066\001\002\000\006\005\070\023\066" +
    "\001\002\000\006\005\uffe3\023\uffe3\001\002\000\004\006" +
    "\067\001\002\000\006\005\uffe2\023\uffe2\001\002\000\004" +
    "\006\uffe5\001\002\000\006\005\uffe4\023\uffe4\001\002\000" +
    "\004\023\073\001\002\000\004\006\uffec\001\002\000\014" +
    "\026\101\027\102\030\077\031\076\032\075\001\002\000" +
    "\004\004\103\001\002\000\004\006\uffde\001\002\000\004" +
    "\006\uffdf\001\002\000\004\006\uffe7\001\002\000\004\006" +
    "\uffe1\001\002\000\004\006\uffe0\001\002\000\004\013\104" +
    "\001\002\000\004\007\110\001\002\000\004\006\106\001" +
    "\002\000\004\005\107\001\002\000\004\006\uffdd\001\002" +
    "\000\004\023\111\001\002\000\004\006\uffe6\001\002\000" +
    "\004\023\113\001\002\000\004\006\uffed\001\002\000\004" +
    "\023\115\001\002\000\004\006\uffeb\001\002\000\004\025" +
    "\117\001\002\000\004\006\uffe9\001\002\000\004\023\121" +
    "\001\002\000\004\006\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\002\005\003\004\001\001\000\004\030" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\034\005\033\006\036\011\032\012\037\013\026\015\017" +
    "\016\031\017\022\020\014\021\013\022\012\023\020\024" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\046\011\045" +
    "\013\026\001\001\000\002\001\001\000\024\012\050\015" +
    "\017\016\031\017\022\020\014\021\013\022\012\023\020" +
    "\024\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\063" +
    "\026\064\001\001\000\004\026\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConfigParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConfigParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConfigParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	config = new HashSet<>();
	deque = new ArrayDeque<UserConf>();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	// just to obtain the line/column-occurences
	Symbol currRead = getScanner().next_token();
	line = currRead.left + 1;
	column = currRead.right + 1;
	return currRead;

    }


	public static class ConfigParserException extends Exception {
		public ConfigParserException(String msg) {
			super(msg);
		}
	}
	public HashSet<UserConf> getUserConf() {
		return config;
	}
	public void setDefaultConf(UserConf defaultConfig) {
		this.defaultConfig = defaultConfig;
	}
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
    	errorMsgBuffer = new StringBuffer();
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
            	errorMsgBuffer.append(" in line "+ s.left);   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                	errorMsgBuffer.append(", column "+ s.right);
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        //errorMsgBuffer.append(message);       
        /* Print the contents of the StringBuffer 'errorMsgBuffer', which contains
           an error message, out on a line. */
        //System.err.println(errorMsgBuffer);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);        
        throw new ConfigParserException("Syntax error: " + errorMsgBuffer.toString());
    }
    private StringBuffer errorMsgBuffer;
    	// TODO 2014-07-27 off-by-one(+1) at e.g. Var-decls, otherwise correct
	// current line where lexed symbol occured
	protected int line;
	// current column where lexed symbol occured
	protected int column;
	protected UserConf defaultConfig;
	protected HashSet<UserConf> config;
	protected Deque<UserConf> deque;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConfigParser$actions {

	
	// init first

  private final ConfigParser parser;

  /** Constructor */
  CUP$ConfigParser$actions(ConfigParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConfigParser$do_action(
    int                        CUP$ConfigParser$act_num,
    java_cup.runtime.lr_parser CUP$ConfigParser$parser,
    java.util.Stack            CUP$ConfigParser$stack,
    int                        CUP$ConfigParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConfigParser$result;

      /* select the action based on the action number */
      switch (CUP$ConfigParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // n_local_config ::= T_USER_ID NT$1 T_LBRACE n_local_directives T_RBRACE T_SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-5)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-3)).right;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-3)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).right;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String semi = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		// recent configuration ends -- top-most is popped into hashset
		parser.config.add(parser.deque.removeFirst());
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_local_config",5, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-5)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;

		UserConf parent = parser.deque.peekFirst();
		// user directive renders parent conf inactive for later execution, besides value retrieval
		parent.setIsOverridden(true);
		// new configuration starts -- parent is global
		parser.deque.addFirst(new UserConf(id, parent));
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // n_local_configs ::= 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_local_configs",4, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // n_local_configs ::= n_local_configs n_local_config 
            {
              Object RESULT =null;
		int confleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int confright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Object conf = (Object)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_local_configs",4, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // n_valid_modes ::= T_MERGE T_LBRACE n_original_directive T_SEMI T_RBRACE 
            {
              Configuration.Mode RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-4)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-4)).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-4)).value;
		 RESULT = mode; 
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_valid_modes",21, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-4)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // n_valid_modes ::= T_ASPLIT 
            {
              Configuration.Mode RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		 RESULT = mode; 
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_valid_modes",21, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // n_valid_modes ::= T_AREPORT 
            {
              Configuration.Mode RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		 RESULT = mode; 
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_valid_modes",21, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // n_valid_modes ::= T_SPLIT 
            {
              Configuration.Mode RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		 RESULT = mode; 
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_valid_modes",21, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // n_valid_modes ::= T_REPORT 
            {
              Configuration.Mode RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		 RESULT = mode; 
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_valid_modes",21, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // n_blacklist_file ::= T_STRING T_SEMI 
            {
              Object RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).value;
		
		parser.deque.peekFirst().addToBlackList(file);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_blacklist_file",20, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // n_blacklist_files ::= n_blacklist_file 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_blacklist_files",19, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // n_blacklist_files ::= n_blacklist_files n_blacklist_file 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_blacklist_files",19, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // n_blacklist_directive ::= T_BLACKLIST T_LBRACE n_blacklist_files T_RBRACE 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_blacklist_directive",18, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-3)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // n_original_directive ::= T_ORIGINAL T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int originalleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int originalright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String original = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setOriginalDirectory(original);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_original_directive",10, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // n_mode_directive ::= T_MODE T_ASSIGN n_valid_modes 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Configuration.Mode mode = (Configuration.Mode)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setMode(mode);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_mode_directive",16, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // n_macropattern_directive ::= T_MACROPATTERN T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int macropatternleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int macropatternright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String macropattern = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setMacroPattern(macropattern);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_macropattern_directive",12, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // n_logrotate_directive ::= T_LOGROTATE T_ASSIGN T_DECIMAL_NUMBER 
            {
              Object RESULT =null;
		int logrotateNleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int logrotateNright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Integer logrotateN = (Integer)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setLogRotateN(logrotateN);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_logrotate_directive",15, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // n_logprefix_directive ::= T_LOGPREFIX T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int logprefixleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int logprefixright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String logprefix = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setLogPrefix(logprefix);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_logprefix_directive",14, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // n_logdir_directive ::= T_LOGDIR T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int logdirleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int logdirright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String logdir = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setLogDirectory(logdir);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_logdir_directive",13, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // n_input_directive ::= T_INPUT T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String input = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setInputDirectory(input);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_input_directive",9, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // n_filetype_directive ::= T_FILETYPE T_ASSIGN T_STRING 
            {
              Object RESULT =null;
		int filetypeleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int filetyperight = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String filetype = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setFilePattern(filetype);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_filetype_directive",11, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // n_debug_directive ::= T_DEBUG T_ASSIGN T_DECIMAL_NUMBER 
            {
              Object RESULT =null;
		int debugleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int debugright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Integer debug = (Integer)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		parser.deque.peekFirst().setMakeDebugOutput(debug != 0 ? true : false);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_debug_directive",17, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n_optional_directive ::= n_blacklist_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // n_optional_directive ::= n_mode_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // n_optional_directive ::= n_macropattern_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // n_optional_directive ::= n_logrotate_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // n_optional_directive ::= n_logprefix_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // n_optional_directive ::= n_logdir_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // n_optional_directive ::= n_filetype_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // n_optional_directive ::= n_debug_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_optional_directive",8, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // n_mandatory_directive ::= n_input_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_mandatory_directive",7, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // n_local_directives ::= n_mandatory_directive T_SEMI 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_local_directives",6, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // n_local_directives ::= n_local_directives n_optional_directive T_SEMI 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_local_directives",6, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // n_global_optional_directive ::= n_optional_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_global_optional_directive",3, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // n_global_optional_directive ::= n_mandatory_directive 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_global_optional_directive",3, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // n_global_directives ::= 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_global_directives",2, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // n_global_directives ::= n_global_directives n_global_optional_directive T_SEMI 
            {
              Object RESULT =null;

              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_global_directives",2, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // n_global_config ::= T_GLOBAL_ID NT$0 T_LBRACE n_global_directives n_local_configs T_RBRACE T_SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-6)).value;
		int confsleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)).left;
		int confsright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)).right;
		Object confs = (Object)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-2)).value;
		
		// global user configuration ends
		parser.config.add(parser.deque.removeFirst());
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_global_config",1, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-6)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;

		// global user configuration starts -- no parent config
		parser.deque.addFirst(new UserConf(id, parser.defaultConfig));
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= n_config_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).right;
		HashSet<UserConf> start_val = (HashSet<UserConf>)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)).value;
		RESULT = start_val;
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.elementAt(CUP$ConfigParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConfigParser$parser.done_parsing();
          return CUP$ConfigParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // n_config_file ::= n_global_config 
            {
              HashSet<UserConf> RESULT =null;
		int confleft = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).left;
		int confright = ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()).right;
		Object conf = (Object)((java_cup.runtime.Symbol) CUP$ConfigParser$stack.peek()).value;
		
		//System.out.println("DEQUE:" + parser.deque);
		//System.out.println("SET:" + parser.config);
	
              CUP$ConfigParser$result = parser.getSymbolFactory().newSymbol("n_config_file",0, ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigParser$stack.peek()), RESULT);
            }
          return CUP$ConfigParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

