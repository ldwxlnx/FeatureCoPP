/* The following code was generated by JFlex 1.6.1 */

/* --------------------------Usercode Section------------------------ */
package de.ovgu.spldev.featurecopp.config;   
import java_cup.runtime.*;   
import java.io.PrintStream;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/miniztree/DATA/__SYSTEM/home/Java-Development/FeatureCoPP/specs/config_analyzer/config_analyzer.flex</tt>
 */
class ConfigLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\16\1\3\1\2\1\0\1\3\1\1\16\16\4\0\1\7\1\6"+
    "\1\43\1\0\1\17\2\0\1\0\2\0\1\5\4\0\1\4\1\42"+
    "\1\51\6\40\1\40\1\40\1\0\1\52\1\0\1\53\1\0\1\0"+
    "\1\0\1\15\1\15\1\34\1\36\1\24\1\15\1\31\1\21\3\15"+
    "\1\15\1\23\1\15\1\22\1\27\1\15\1\30\1\33\1\26\1\32"+
    "\1\15\1\35\1\15\2\15\1\0\1\41\2\0\1\15\1\0\1\14"+
    "\1\13\1\61\1\62\1\56\1\44\1\10\1\15\1\54\1\15\1\64"+
    "\1\11\1\60\1\45\1\12\1\55\1\15\1\46\1\63\1\47\1\37"+
    "\1\15\1\15\1\50\1\57\1\15\1\20\1\0\1\25\1\0\41\16"+
    "\2\0\4\15\4\0\1\15\2\0\1\16\7\0\1\15\4\0\1\15"+
    "\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15\16\0\5\15"+
    "\7\0\1\15\1\0\1\15\21\0\160\16\5\15\1\0\2\15\2\0"+
    "\4\15\1\0\1\15\6\0\1\15\1\0\3\15\1\0\1\15\1\0"+
    "\24\15\1\0\123\15\1\0\213\15\1\0\5\16\2\0\246\15\1\0"+
    "\46\15\2\0\1\15\7\0\47\15\7\0\1\15\1\0\55\16\1\0"+
    "\1\16\1\0\2\16\1\0\2\16\1\0\1\16\10\0\33\15\5\0"+
    "\3\15\15\0\6\16\5\0\1\15\4\0\13\16\1\0\1\16\3\0"+
    "\53\15\37\16\4\0\2\15\1\16\143\15\1\0\1\15\10\16\1\0"+
    "\6\16\2\15\2\16\1\0\4\16\2\15\12\16\3\15\2\0\1\15"+
    "\17\0\1\16\1\15\1\16\36\15\33\16\2\0\131\15\13\16\1\15"+
    "\16\0\12\16\41\15\11\16\2\15\4\0\1\15\5\0\26\15\4\16"+
    "\1\15\11\16\1\15\3\16\1\15\5\16\22\0\31\15\3\16\104\0"+
    "\25\15\56\0\41\16\66\15\3\16\1\15\22\16\1\15\7\16\12\15"+
    "\2\16\2\0\12\16\1\0\20\15\3\16\1\0\10\15\2\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\2\0\1\16"+
    "\1\15\7\16\2\0\2\16\2\0\3\16\1\15\10\0\1\16\4\0"+
    "\2\15\1\0\3\15\2\16\2\0\12\16\4\15\7\0\1\15\5\0"+
    "\3\16\1\0\6\15\4\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\2\15\1\0\2\15\2\0\1\16\1\0\5\16\4\0"+
    "\2\16\2\0\3\16\3\0\1\16\7\0\4\15\1\0\1\15\7\0"+
    "\14\16\3\15\1\16\13\0\3\16\1\0\11\15\1\0\3\15\1\0"+
    "\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\16\1\15"+
    "\10\16\1\0\3\16\1\0\3\16\2\0\1\15\17\0\2\15\2\16"+
    "\2\0\12\16\1\0\1\15\7\0\1\15\7\0\3\16\1\0\10\15"+
    "\2\0\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15"+
    "\2\0\1\16\1\15\7\16\2\0\2\16\2\0\3\16\10\0\2\16"+
    "\4\0\2\15\1\0\3\15\2\16\2\0\12\16\1\0\1\15\20\0"+
    "\1\16\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15"+
    "\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15"+
    "\4\0\5\16\3\0\3\16\1\0\4\16\2\0\1\15\6\0\1\16"+
    "\16\0\12\16\11\0\1\15\6\0\4\16\1\0\10\15\1\0\3\15"+
    "\1\0\27\15\1\0\20\15\3\0\1\15\7\16\1\0\3\16\1\0"+
    "\4\16\7\0\2\16\1\0\3\15\5\0\2\15\2\16\2\0\12\16"+
    "\21\0\3\16\1\0\10\15\1\0\3\15\1\0\27\15\1\0\12\15"+
    "\1\0\5\15\2\0\1\16\1\15\7\16\1\0\3\16\1\0\4\16"+
    "\7\0\2\16\7\0\1\15\1\0\2\15\2\16\2\0\12\16\1\0"+
    "\2\15\16\0\3\16\1\0\10\15\1\0\3\15\1\0\51\15\2\0"+
    "\1\15\7\16\1\0\3\16\1\0\4\16\1\15\10\0\1\16\7\0"+
    "\3\15\2\16\2\0\12\16\12\0\6\15\2\0\2\16\1\0\22\15"+
    "\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\16"+
    "\4\0\6\16\1\0\1\16\1\0\10\16\6\0\12\16\2\0\2\16"+
    "\15\0\60\15\1\16\2\15\7\16\4\0\10\15\10\16\1\0\12\16"+
    "\47\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15"+
    "\2\0\2\15\1\0\4\15\1\16\2\15\6\16\1\0\2\16\1\15"+
    "\2\0\5\15\1\0\1\15\1\0\6\16\2\0\12\16\2\0\4\15"+
    "\40\0\1\15\27\0\2\16\6\0\12\16\13\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\2\16\10\15\1\0\44\15\4\0\24\16\1\0"+
    "\2\16\5\15\13\16\1\0\44\16\11\0\1\16\71\0\53\15\24\16"+
    "\1\15\12\16\6\0\6\15\4\16\4\15\3\16\1\15\3\16\2\15"+
    "\7\16\3\15\4\16\15\15\14\16\1\15\17\16\2\0\46\15\1\0"+
    "\1\15\5\0\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15\2\0"+
    "\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15\2\0"+
    "\41\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0"+
    "\17\15\1\0\71\15\1\0\4\15\2\0\103\15\2\0\3\16\40\0"+
    "\20\15\20\0\126\15\2\0\6\15\3\0\u026c\15\2\0\21\15\1\0"+
    "\32\15\5\0\113\15\3\0\13\15\7\0\15\15\1\0\4\15\3\16"+
    "\13\0\22\15\3\16\13\0\22\15\2\16\14\0\15\15\1\0\3\15"+
    "\1\0\2\16\14\0\64\15\40\16\3\0\1\15\3\0\2\15\1\16"+
    "\2\0\12\16\41\0\4\16\1\0\12\16\6\0\130\15\10\0\51\15"+
    "\1\16\1\15\5\0\106\15\12\0\37\15\1\0\14\16\4\0\14\16"+
    "\12\0\12\16\36\15\2\0\5\15\13\0\54\15\4\0\32\15\6\0"+
    "\12\16\46\0\27\15\5\16\4\0\65\15\12\16\1\0\35\16\2\0"+
    "\13\16\6\0\12\16\15\0\1\15\10\0\16\16\102\0\5\16\57\15"+
    "\21\16\7\15\4\0\12\16\21\0\11\16\14\0\3\16\36\15\15\16"+
    "\2\15\12\16\54\15\16\16\14\0\44\15\24\16\10\0\12\16\3\0"+
    "\3\15\12\16\44\15\122\0\3\16\1\0\25\16\4\15\1\16\4\15"+
    "\3\16\2\15\1\0\2\16\6\0\300\15\66\16\6\0\4\16\u0116\15"+
    "\2\0\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15"+
    "\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15"+
    "\4\0\15\15\5\0\3\15\1\0\7\15\16\0\5\16\32\0\5\16"+
    "\20\0\2\15\23\0\1\15\13\0\5\16\1\0\12\16\1\0\1\15"+
    "\15\0\1\15\20\0\15\15\3\0\37\15\21\0\15\16\4\0\1\16"+
    "\3\0\14\16\21\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15"+
    "\3\0\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15"+
    "\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1\15\21\0\51\15"+
    "\u0a77\0\57\15\1\0\57\15\1\0\205\15\6\0\4\15\3\16\2\15"+
    "\14\0\46\15\1\0\1\15\5\0\1\15\2\0\70\15\7\0\1\15"+
    "\17\0\1\16\27\15\11\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\40\16\57\0\1\15\u01d5\0\3\15\31\0\11\15\6\16\1\0\5\15"+
    "\2\0\5\15\4\0\126\15\2\0\2\16\2\0\3\15\1\0\132\15"+
    "\1\0\4\15\5\0\51\15\3\0\136\15\21\0\33\15\65\0\20\15"+
    "\u0200\0\u19b6\15\112\0\u51d6\15\52\0\u048d\15\103\0\56\15\2\0\u010d\15"+
    "\3\0\20\15\12\16\2\15\24\0\57\15\1\16\4\0\12\16\1\0"+
    "\37\15\2\16\120\15\2\16\45\0\11\15\2\0\147\15\2\0\43\15"+
    "\2\0\10\15\77\0\13\15\1\16\3\15\1\16\4\15\1\16\27\15"+
    "\5\16\20\0\1\15\7\0\64\15\14\0\2\16\62\15\21\16\13\0"+
    "\12\16\6\0\22\16\6\15\3\0\1\15\1\0\1\15\2\0\12\16"+
    "\34\15\10\16\2\0\27\15\15\16\14\0\35\15\3\0\4\16\57\15"+
    "\16\16\16\0\1\15\12\16\6\0\5\15\1\16\12\15\12\16\5\15"+
    "\1\0\51\15\16\16\11\0\3\15\1\16\10\15\2\16\2\0\12\16"+
    "\6\0\27\15\3\0\1\15\3\16\62\15\1\16\1\15\3\16\2\15"+
    "\2\16\5\15\2\16\1\15\1\16\1\15\30\0\3\15\2\0\13\15"+
    "\5\16\2\0\3\15\2\16\12\0\6\15\2\0\6\15\2\0\6\15"+
    "\11\0\7\15\1\0\7\15\1\0\53\15\1\0\12\15\12\0\163\15"+
    "\10\16\1\0\2\16\2\0\12\16\6\0\u2ba4\15\14\0\27\15\4\0"+
    "\61\15\u2104\0\u016e\15\2\0\152\15\46\0\7\15\14\0\5\15\5\0"+
    "\1\15\1\16\12\15\1\0\15\15\1\0\5\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0"+
    "\66\15\50\0\15\15\3\0\20\16\20\0\20\16\3\0\2\15\30\0"+
    "\3\15\31\0\1\15\6\0\5\15\1\0\207\15\2\0\1\16\4\0"+
    "\1\15\13\0\12\16\7\0\32\15\4\0\1\15\1\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0"+
    "\2\15\3\0\2\15\22\0\3\16\4\0\14\15\1\0\32\15\1\0"+
    "\23\15\1\0\2\15\1\0\17\15\2\0\16\15\42\0\173\15\105\0"+
    "\65\15\210\0\1\16\202\0\35\15\3\0\61\15\17\0\1\16\37\0"+
    "\40\15\20\0\33\15\5\0\46\15\5\16\5\0\36\15\2\0\44\15"+
    "\4\0\10\15\1\0\5\15\52\0\236\15\2\0\12\16\126\0\50\15"+
    "\10\0\64\15\234\0\u0137\15\11\0\26\15\12\0\10\15\230\0\6\15"+
    "\2\0\1\15\1\0\54\15\1\0\2\15\3\0\1\15\2\0\27\15"+
    "\12\0\27\15\11\0\37\15\101\0\23\15\1\0\2\15\12\0\26\15"+
    "\12\0\32\15\106\0\70\15\6\0\2\15\100\0\1\15\3\16\1\0"+
    "\2\16\5\0\4\16\4\15\1\0\3\15\1\0\33\15\4\0\3\16"+
    "\4\0\1\16\40\0\35\15\3\0\35\15\43\0\10\15\1\0\34\15"+
    "\2\16\31\0\66\15\12\0\26\15\12\0\23\15\15\0\22\15\156\0"+
    "\111\15\67\0\63\15\15\0\63\15\u030d\0\3\16\65\15\17\16\37\0"+
    "\12\16\17\0\4\16\55\15\13\16\2\0\1\16\22\0\31\15\7\0"+
    "\12\16\6\0\3\16\44\15\16\16\1\0\12\16\20\0\43\15\1\16"+
    "\2\0\1\15\11\0\3\16\60\15\16\16\4\15\5\0\3\16\3\0"+
    "\12\16\1\15\1\0\1\15\43\0\22\15\1\0\31\15\14\16\110\0"+
    "\7\15\1\0\1\15\1\0\4\15\1\0\17\15\1\0\12\15\7\0"+
    "\57\15\14\16\5\0\12\16\6\0\4\16\1\0\10\15\2\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\16"+
    "\1\15\7\16\2\0\2\16\2\0\3\16\2\0\1\15\6\0\1\16"+
    "\5\0\5\15\2\16\2\0\7\16\3\0\5\16\u010b\0\60\15\24\16"+
    "\2\15\1\0\1\15\10\0\12\16\246\0\57\15\7\16\2\0\11\16"+
    "\27\0\4\15\2\16\42\0\60\15\21\16\3\0\1\15\13\0\12\16"+
    "\46\0\53\15\15\16\10\0\12\16\66\0\32\15\3\0\17\16\4\0"+
    "\12\16\u0166\0\100\15\12\16\25\0\1\15\u01c0\0\71\15\u0507\0\u039a\15"+
    "\146\0\157\15\21\0\304\15\u0abc\0\u042f\15\u0fd1\0\u0247\15\u21b9\0\u0239\15"+
    "\7\0\37\15\1\0\12\16\146\0\36\15\2\0\5\16\13\0\60\15"+
    "\7\16\11\0\4\15\14\0\12\16\11\0\25\15\5\0\23\15\u0370\0"+
    "\105\15\13\0\1\15\56\16\20\0\4\16\15\15\u4060\0\2\15\u0bfe\0"+
    "\153\15\5\0\15\15\3\0\11\15\7\0\12\15\3\0\2\16\1\0"+
    "\4\16\u14c1\0\5\16\3\0\26\16\2\0\7\16\36\0\4\16\224\0"+
    "\3\16\u01bb\0\125\15\1\0\107\15\1\0\2\15\2\0\1\15\2\0"+
    "\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0"+
    "\101\15\1\0\4\15\2\0\10\15\1\0\7\15\1\0\34\15\1\0"+
    "\4\15\1\0\5\15\1\0\1\15\3\0\7\15\1\0\u0154\15\2\0"+
    "\31\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0\37\15\1\0"+
    "\31\15\1\0\37\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0"+
    "\10\15\2\0\62\16\u0200\0\67\16\4\0\62\16\10\0\1\16\16\0"+
    "\1\16\26\0\5\16\1\0\17\16\u0d50\0\305\15\13\0\7\16\u0529\0"+
    "\4\15\1\0\33\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0"+
    "\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\3\15\1\0\2\15\1\0"+
    "\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0"+
    "\4\15\1\0\4\15\1\0\1\15\1\0\12\15\1\0\21\15\5\0"+
    "\3\15\1\0\5\15\1\0\21\15\u1144\0\ua6d7\15\51\0\u1035\15\13\0"+
    "\336\15\2\0\u1682\15\u295e\0\u021e\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\16\36\0\140\16\200\0\360\16\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\6\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\3\1\7\1\11\1\12\4\3\2\13"+
    "\1\14\1\15\1\2\1\0\16\3\1\0\1\16\1\17"+
    "\1\20\1\21\1\0\2\2\16\3\6\0\13\3\1\22"+
    "\4\3\5\0\12\3\1\23\1\3\1\24\1\25\1\26"+
    "\5\0\1\27\6\3\1\30\1\3\1\31\1\3\1\0"+
    "\1\32\2\0\1\33\5\3\1\34\2\3\1\35\1\36"+
    "\1\37\3\3\1\40\1\3\1\41\1\3\1\42\1\43"+
    "\1\3\1\44\5\3\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\152\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\152\0\152\0\u0247\0\152"+
    "\0\152\0\u027c\0\u02b1\0\u0247\0\152\0\152\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\152\0\u03ba\0\u03ef\0\152\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\152"+
    "\0\152\0\152\0\152\0\u07a9\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0212\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u0212\0\u126d\0\u0212\0\u0212\0\u0212\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u0212\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u0212\0\u14e9\0\u0212\0\u151e\0\u1553\0\152"+
    "\0\u1588\0\u15bd\0\152\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u0212\0\u16fb\0\u1730\0\152\0\152\0\152\0\u1765\0\u179a"+
    "\0\u17cf\0\u0212\0\u1804\0\u0212\0\u1839\0\u0212\0\u0212\0\u186e"+
    "\0\u0212\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u0212\0\u0212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\2\3\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\3\1\14\1\15\4\14"+
    "\1\16\12\14\1\17\1\3\1\20\1\21\1\22\1\14"+
    "\1\23\2\14\1\24\1\25\1\26\1\27\3\14\1\30"+
    "\1\14\1\31\1\32\1\14\17\33\1\34\21\33\1\35"+
    "\1\33\1\36\21\33\67\0\1\5\66\0\1\37\1\40"+
    "\67\0\1\14\1\41\6\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\6\14\2\0\11\14\10\0\2\14"+
    "\1\42\5\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\11\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\2\14\1\43\3\14"+
    "\2\0\11\14\10\0\1\14\1\44\6\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\2\14\1\45\3\14\2\0\7\14\1\46\1\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\11\14\40\0\1\17\1\0\1\17"+
    "\6\0\1\17\23\0\10\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\6\14\2\0\1\47\10\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\2\14\1\50\6\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\1\14\1\51"+
    "\4\14\2\0\11\14\10\0\2\14\1\52\1\14\1\53"+
    "\3\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\2\14\1\54\6\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\2\14\1\55\6\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\1\14\1\56"+
    "\7\14\20\0\1\57\107\0\1\60\1\0\1\61\1\62"+
    "\1\63\15\0\1\37\1\4\1\5\62\37\4\64\1\65"+
    "\1\66\2\65\55\64\10\0\2\14\1\67\5\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\11\14\10\0\1\70\7\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\6\14\2\0\11\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\1\71\10\14\10\0\4\14\1\72\3\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\11\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\2\14\1\73\6\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\1\14\1\74\7\14\10\0\1\14\1\75"+
    "\6\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\1\14\1\76"+
    "\7\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\1\14\1\77\7\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\6\14\1\100\2\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\5\14\1\101\3\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\2\14\1\102\3\14\2\0"+
    "\11\14\10\0\3\14\1\103\4\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\11\14\10\0"+
    "\1\14\1\104\6\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\11\14\21\0\1\105\4\0"+
    "\1\106\1\107\2\0\1\110\1\0\1\111\30\0\5\64"+
    "\1\112\63\64\1\65\1\112\57\64\10\0\3\14\1\113"+
    "\4\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\2\14\1\114\3\14\2\0"+
    "\1\14\1\115\4\14\1\116\2\14\10\0\1\117\7\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\11\14\10\0\10\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\6\14\2\0\5\14\1\120\3\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\1\14\1\121\7\14\10\0\1\14"+
    "\1\122\6\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\11\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\2\14"+
    "\1\123\6\14\10\0\2\14\1\124\5\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\11\14\1\125\1\14"+
    "\1\0\1\14\1\0\6\14\2\0\11\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\2\14\1\126\6\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\2\14\1\127\3\14"+
    "\2\0\11\14\10\0\1\130\7\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\11\14\10\0"+
    "\10\14\1\0\4\14\1\0\11\14\1\131\1\14\1\0"+
    "\1\14\1\0\6\14\2\0\11\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\1\132\10\14\22\0\1\133\65\0\1\134\71\0\1\135"+
    "\67\0\1\136\66\0\1\137\27\0\4\64\1\5\1\112"+
    "\57\64\10\0\4\14\1\140\3\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\11\14\10\0"+
    "\2\14\1\141\5\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\11\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\2\14\1\142"+
    "\3\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\1\143\10\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\1\144\10\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\10\14\1\145\10\0\2\14\1\146\5\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\1\147\10\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\3\14\1\150"+
    "\2\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\2\14\1\151\3\14\2\0"+
    "\11\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\3\14\1\152\2\14\2\0\11\14\10\0"+
    "\2\14\1\153\5\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\11\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\2\14\1\154\6\14\10\0\1\155\7\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\3\14\1\156\2\14\2\0\11\14\23\0\1\157"+
    "\70\0\1\160\57\0\1\161\66\0\1\162\76\0\1\163"+
    "\36\0\1\14\1\164\6\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\6\14\2\0\11\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\3\14"+
    "\1\165\2\14\2\0\11\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\2\14"+
    "\1\166\6\14\10\0\10\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\2\14\1\167\3\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\1\14\1\170\4\14\2\0\11\14\10\0\1\14"+
    "\1\171\6\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\11\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\2\14\1\172\3\14"+
    "\2\0\11\14\10\0\10\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\3\14\1\173\2\14\2\0\11\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\6\14\2\0\3\14\1\174\5\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\3\14"+
    "\1\175\2\14\2\0\11\14\10\0\10\14\1\0\4\14"+
    "\1\0\13\14\1\0\1\14\1\0\6\14\2\0\1\14"+
    "\1\176\7\14\24\0\1\177\65\0\1\200\70\0\1\201"+
    "\63\0\1\202\61\0\1\203\47\0\4\14\1\204\3\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\11\14\10\0\10\14\1\0\4\14\1\0\13\14"+
    "\1\0\1\14\1\0\1\205\5\14\2\0\11\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\2\14\1\206\6\14\10\0\4\14\1\207"+
    "\3\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\1\210\10\14"+
    "\10\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\3\14\1\211\2\14\2\0\11\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\1\14\1\212\7\14\10\0\4\14\1\213\3\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\11\14\25\0\1\214\64\0\1\215\64\0\1\216"+
    "\47\0\10\14\1\0\4\14\1\0\13\14\1\0\1\14"+
    "\1\0\3\14\1\217\2\14\2\0\11\14\10\0\10\14"+
    "\1\0\4\14\1\0\13\14\1\0\1\14\1\0\6\14"+
    "\2\0\1\220\10\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\5\14\1\221"+
    "\3\14\10\0\1\14\1\222\6\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\6\14\2\0\11\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\7\14\1\223\1\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\2\14\1\224\6\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\3\14\1\225\2\14\2\0"+
    "\11\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\2\14\1\226\6\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\4\14\1\227\1\14\2\0\11\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\3\14\1\230"+
    "\2\14\2\0\11\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\3\14\1\231\2\14\2\0"+
    "\11\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\3\14\1\232\2\14\2\0\11\14\10\0"+
    "\2\14\1\233\5\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\6\14\2\0\11\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\6\14\2\0"+
    "\2\14\1\234\6\14\10\0\10\14\1\0\4\14\1\0"+
    "\13\14\1\0\1\14\1\0\2\14\1\235\3\14\2\0"+
    "\11\14\10\0\10\14\1\0\4\14\1\0\13\14\1\0"+
    "\1\14\1\0\2\14\1\236\3\14\2\0\11\14\10\0"+
    "\10\14\1\0\4\14\1\0\13\14\1\0\1\14\1\0"+
    "\6\14\2\0\3\14\1\237\5\14\10\0\10\14\1\0"+
    "\4\14\1\0\13\14\1\0\1\14\1\0\1\14\1\240"+
    "\4\14\2\0\11\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6572];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\7\1\2\11\1\1\2\11"+
    "\3\1\2\11\4\1\1\11\2\1\1\11\1\1\1\0"+
    "\16\1\1\0\4\11\1\0\20\1\6\0\20\1\5\0"+
    "\17\1\5\0\13\1\1\0\1\11\2\0\1\11\10\1"+
    "\3\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	ConfigLexer(boolean isDebug, java.io.Reader in) {
		this(in);
		this.isDebug = isDebug;
	}
	/** Reusable Lexer with changing java.io.Readers*/

	public static class ConfigLexerException extends Exception {
		public ConfigLexerException(String msg) {
			super(msg);
		}
	}
	public void setReader(java.io.Reader in) {
		zzReader = in;
	}
	/**
	 * if true, enables debug output, silencing otherwise
	 */
	public void debug(boolean isDebug) {
		this.isDebug = isDebug;
	}
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol genSymbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol genSymbol(int type, Object value) {
    	if(isDebug) {
    		writeTokenStatsTo(System.err, type, value);
    	}
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
        
    }
    private void writeTokenStatsTo(PrintStream strm, int type, Object value) {
    	if(strm == null) {
    		strm = System.out;
    	}
    	strm.println(String.format("Type=[%3d]; Token=[%s]", type, value));
    }
    
    private boolean isDebug;
    protected StringBuffer stringBuffer = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ConfigLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3290) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return genSymbol(ConfigSymbols.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yytext(); throw new java.io.IOException("Illegal character ["+yytext()+"] at line: "
			+ (yyline + 1)
			+ " column: " + (yycolumn + 1) + "!");
            }
          case 39: break;
          case 2: 
            { // syntactically ignored
            }
          case 40: break;
          case 3: 
            { return genSymbol(ConfigSymbols.T_USER_ID, yytext());
            }
          case 41: break;
          case 4: 
            { return genSymbol(ConfigSymbols.T_LBRACE, yytext());
            }
          case 42: break;
          case 5: 
            { return genSymbol(ConfigSymbols.T_RBRACE, yytext());
            }
          case 43: break;
          case 6: 
            { return genSymbol(ConfigSymbols.T_DECIMAL_NUMBER, Integer.parseInt(yytext()));
            }
          case 44: break;
          case 7: 
            { return genSymbol(ConfigSymbols.T_BINARY_DIGIT, Integer.parseInt(yytext()) == 1 ? true : false);
            }
          case 45: break;
          case 8: 
            { // switch to string state
		stringBuffer.setLength(0);
		yybegin(STRING);
            }
          case 46: break;
          case 9: 
            { return genSymbol(ConfigSymbols.T_SEMI, yytext());
            }
          case 47: break;
          case 10: 
            { return genSymbol(ConfigSymbols.T_ASSIGN, yytext());
            }
          case 48: break;
          case 11: 
            { stringBuffer.append(yytext());
            }
          case 49: break;
          case 12: 
            { stringBuffer.append('\\');
            }
          case 50: break;
          case 13: 
            { // return from string state
        yybegin(YYINITIAL);
    	return genSymbol(ConfigSymbols.T_STRING, stringBuffer.toString());
            }
          case 51: break;
          case 14: 
            { stringBuffer.append('\"');
            }
          case 52: break;
          case 15: 
            { stringBuffer.append('\n');
            }
          case 53: break;
          case 16: 
            { stringBuffer.append('\r');
            }
          case 54: break;
          case 17: 
            { stringBuffer.append('\t');
            }
          case 55: break;
          case 18: 
            { return genSymbol(ConfigSymbols.T_MODE, yytext());
            }
          case 56: break;
          case 19: 
            { return genSymbol(ConfigSymbols.T_INPUT, yytext());
            }
          case 57: break;
          case 20: 
            { return genSymbol(ConfigSymbols.T_MERGE, Configuration.Mode.merge);
            }
          case 58: break;
          case 21: 
            { return genSymbol(ConfigSymbols.T_DEBUG, yytext());
            }
          case 59: break;
          case 22: 
            { return genSymbol(ConfigSymbols.T_SPLIT, Configuration.Mode.split);
            }
          case 60: break;
          case 23: 
            { return genSymbol(ConfigSymbols.T_GLOBAL_ID, yytext());
            }
          case 61: break;
          case 24: 
            { return genSymbol(ConfigSymbols.T_ASPLIT, Configuration.Mode.asplit);
            }
          case 62: break;
          case 25: 
            { return genSymbol(ConfigSymbols.T_REPORT, Configuration.Mode.report);
            }
          case 63: break;
          case 26: 
            { stringBuffer.append(System.getProperty("java.io.tmpdir"));
            }
          case 64: break;
          case 27: 
            { stringBuffer.append(System.getProperty("user.dir"));
            }
          case 65: break;
          case 28: 
            { return genSymbol(ConfigSymbols.T_AREPORT, Configuration.Mode.areport);
            }
          case 66: break;
          case 29: 
            { stringBuffer.append(System.getProperty("user.home"));
            }
          case 67: break;
          case 30: 
            { stringBuffer.append(Configuration.APPLICATION_NAME);
            }
          case 68: break;
          case 31: 
            { stringBuffer.append(System.getProperty("user.name"));
            }
          case 69: break;
          case 32: 
            { return genSymbol(ConfigSymbols.T_ORIGINAL, yytext());
            }
          case 70: break;
          case 33: 
            { return genSymbol(ConfigSymbols.T_FILETYPE, yytext());
            }
          case 71: break;
          case 34: 
            { return genSymbol(ConfigSymbols.T_LOGROTATE, yytext());
            }
          case 72: break;
          case 35: 
            { return genSymbol(ConfigSymbols.T_LOGPREFIX, yytext());
            }
          case 73: break;
          case 36: 
            { return genSymbol(ConfigSymbols.T_BLACKLIST, yytext());
            }
          case 74: break;
          case 37: 
            { return genSymbol(ConfigSymbols.T_LOGDIR, yytext());
            }
          case 75: break;
          case 38: 
            { return genSymbol(ConfigSymbols.T_MACROPATTERN, yytext());
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
