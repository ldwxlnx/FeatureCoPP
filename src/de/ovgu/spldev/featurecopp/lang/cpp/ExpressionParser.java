
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 04 16:22:19 CEST 2018
//----------------------------------------------------

package de.ovgu.spldev.featurecopp.lang.cpp;

import java_cup.runtime.*;
import de.ovgu.spldev.featurecopp.*;
import de.ovgu.spldev.featurecopp.splmodel.FeatureTree;
import de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node;
import de.ovgu.spldev.featurecopp.splmodel.IfTree;
import de.ovgu.spldev.featurecopp.splmodel.IfdefTree;
import de.ovgu.spldev.featurecopp.splmodel.IfndefTree;
import de.ovgu.spldev.featurecopp.splmodel.ElifTree;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 04 16:22:19 CEST 2018
  */
public class ExpressionParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\010\004\000\002\002\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\005\007\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\012\002\000\002\004\006" +
    "\000\002\004\003\000\002\007\004\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\016\005\001\002\000\004\002\131\001" +
    "\002\000\012\004\010\005\006\006\007\007\012\001\002" +
    "\000\014\014\024\050\027\051\014\052\025\053\020\001" +
    "\002\000\014\014\024\050\027\051\014\052\025\053\020" +
    "\001\002\000\034\010\017\011\015\012\031\014\024\015" +
    "\023\017\026\020\013\022\030\032\016\050\027\051\014" +
    "\052\025\053\020\001\002\000\004\002\001\001\002\000" +
    "\034\010\017\011\015\012\031\014\024\015\023\017\026" +
    "\020\013\022\030\032\016\050\027\051\014\052\025\053" +
    "\020\001\002\000\034\010\017\011\015\012\031\014\024" +
    "\015\023\017\026\020\013\022\030\032\016\050\027\051" +
    "\014\052\025\053\020\001\002\000\060\002\uffdc\013\uffdc" +
    "\020\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\001\002\000\060\002\uffdf\013\uffdf\020\uffdf" +
    "\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\001\002\000\034\010\017\011\015\012\031\014\024" +
    "\015\023\017\026\020\013\022\030\032\016\050\027\051" +
    "\014\052\025\053\020\001\002\000\016\012\121\014\024" +
    "\050\027\051\014\052\025\053\020\001\002\000\060\002" +
    "\uffda\013\uffda\020\uffda\022\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\001\002\000\060\002\uffe8\013" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\001\002\000\052\002\ufffe\020\057\022" +
    "\040\024\051\025\041\026\035\030\055\031\052\033\042" +
    "\034\056\035\047\036\036\037\043\040\044\041\053\042" +
    "\037\043\054\044\045\045\046\046\060\001\002\000\060" +
    "\002\uffe0\013\uffe0\020\uffe0\022\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002\000\062\002\uffde" +
    "\012\110\013\uffde\020\uffde\022\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\001\002\000\060\002\uffdb" +
    "\013\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\001\002\000\034\010\017\011\015" +
    "\012\031\014\024\015\023\017\026\020\013\022\030\032" +
    "\016\050\027\051\014\052\025\053\020\001\002\000\060" +
    "\002\uffdd\013\uffdd\020\uffdd\022\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\034\010\017" +
    "\011\015\012\031\014\024\015\023\017\026\020\013\022" +
    "\030\032\016\050\027\051\014\052\025\053\020\001\002" +
    "\000\034\010\017\011\015\012\031\014\024\015\023\017" +
    "\026\020\013\022\030\032\016\050\027\051\014\052\025" +
    "\053\020\001\002\000\060\002\uffe2\013\uffe2\020\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\001\002\000\060\002\uffe3\013\uffe3\020\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002" +
    "\000\052\013\050\020\057\022\040\024\051\025\041\026" +
    "\035\030\055\031\052\033\042\034\056\035\047\036\036" +
    "\037\043\040\044\041\053\042\037\043\054\044\045\045" +
    "\046\046\060\001\002\000\034\010\017\011\015\012\031" +
    "\014\024\015\023\017\026\020\013\022\030\032\016\050" +
    "\027\051\014\052\025\053\020\001\002\000\034\010\017" +
    "\011\015\012\031\014\024\015\023\017\026\020\013\022" +
    "\030\032\016\050\027\051\014\052\025\053\020\001\002" +
    "\000\034\010\017\011\015\012\031\014\024\015\023\017" +
    "\026\020\013\022\030\032\016\050\027\051\014\052\025" +
    "\053\020\001\002\000\034\010\017\011\015\012\031\014" +
    "\024\015\023\017\026\020\013\022\030\032\016\050\027" +
    "\051\014\052\025\053\020\001\002\000\034\010\017\011" +
    "\015\012\031\014\024\015\023\017\026\020\013\022\030" +
    "\032\016\050\027\051\014\052\025\053\020\001\002\000" +
    "\034\010\017\011\015\012\031\014\024\015\023\017\026" +
    "\020\013\022\030\032\016\050\027\051\014\052\025\053" +
    "\020\001\002\000\034\010\017\011\015\012\031\014\024" +
    "\015\023\017\026\020\013\022\030\032\016\050\027\051" +
    "\014\052\025\053\020\001\002\000\034\010\017\011\015" +
    "\012\031\014\024\015\023\017\026\020\013\022\030\032" +
    "\016\050\027\051\014\052\025\053\020\001\002\000\034" +
    "\010\017\011\015\012\031\014\024\015\023\017\026\020" +
    "\013\022\030\032\016\050\027\051\014\052\025\053\020" +
    "\001\002\000\034\010\017\011\015\012\031\014\024\015" +
    "\023\017\026\020\013\022\030\032\016\050\027\051\014" +
    "\052\025\053\020\001\002\000\034\010\017\011\015\012" +
    "\031\014\024\015\023\017\026\020\013\022\030\032\016" +
    "\050\027\051\014\052\025\053\020\001\002\000\060\002" +
    "\uffe1\013\uffe1\020\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\001\002\000\034\010\017\011" +
    "\015\012\031\014\024\015\023\017\026\020\013\022\030" +
    "\032\016\050\027\051\014\052\025\053\020\001\002\000" +
    "\034\010\017\011\015\012\031\014\024\015\023\017\026" +
    "\020\013\022\030\032\016\050\027\051\014\052\025\053" +
    "\020\001\002\000\034\010\017\011\015\012\031\014\024" +
    "\015\023\017\026\020\013\022\030\032\016\050\027\051" +
    "\014\052\025\053\020\001\002\000\034\010\017\011\015" +
    "\012\031\014\024\015\023\017\026\020\013\022\030\032" +
    "\016\050\027\051\014\052\025\053\020\001\002\000\034" +
    "\010\017\011\015\012\031\014\024\015\023\017\026\020" +
    "\013\022\030\032\016\050\027\051\014\052\025\053\020" +
    "\001\002\000\034\010\017\011\015\012\031\014\024\015" +
    "\023\017\026\020\013\022\030\032\016\050\027\051\014" +
    "\052\025\053\020\001\002\000\034\010\017\011\015\012" +
    "\031\014\024\015\023\017\026\020\013\022\030\032\016" +
    "\050\027\051\014\052\025\053\020\001\002\000\034\010" +
    "\017\011\015\012\031\014\024\015\023\017\026\020\013" +
    "\022\030\032\016\050\027\051\014\052\025\053\020\001" +
    "\002\000\052\020\057\022\040\024\051\025\041\026\035" +
    "\030\055\031\052\033\042\034\056\035\047\036\036\037" +
    "\043\040\044\041\053\042\037\043\054\044\045\045\046" +
    "\046\060\047\062\001\002\000\034\010\017\011\015\012" +
    "\031\014\024\015\023\017\026\020\013\022\030\032\016" +
    "\050\027\051\014\052\025\053\020\001\002\000\060\002" +
    "\ufffb\013\ufffb\020\057\022\040\024\051\025\041\026\035" +
    "\027\ufffb\030\055\031\052\033\042\034\056\035\047\036" +
    "\036\037\043\040\044\041\053\042\037\043\054\044\045" +
    "\045\046\046\060\047\ufffb\001\002\000\060\002\uffed\013" +
    "\uffed\020\uffed\022\uffed\024\051\025\041\026\035\027\uffed" +
    "\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\001\002\000\060\002\uffef\013\uffef\020" +
    "\057\022\040\024\051\025\041\026\035\027\uffef\030\uffef" +
    "\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\001\002\000\060\002\ufff8\013\ufff8\020\057\022" +
    "\040\024\051\025\041\026\035\027\ufff8\030\ufff8\031\052" +
    "\033\042\034\056\035\047\036\036\037\043\040\044\041" +
    "\053\042\037\043\054\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\001\002\000\060\002\ufff4\013\ufff4\020\057\022\040\024" +
    "\051\025\041\026\035\027\ufff4\030\ufff4\031\ufff4\033\ufff4" +
    "\034\056\035\047\036\036\037\043\040\044\041\053\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001\002" +
    "\000\060\002\ufff0\013\ufff0\020\057\022\040\024\051\025" +
    "\041\026\035\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\056" +
    "\035\047\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\060" +
    "\002\ufff7\013\ufff7\020\057\022\040\024\051\025\041\026" +
    "\035\027\ufff7\030\ufff7\031\ufff7\033\042\034\056\035\047" +
    "\036\036\037\043\040\044\041\053\042\037\043\054\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000\060\002\uffeb" +
    "\013\uffeb\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\001\002\000\060\002\uffee\013\uffee" +
    "\020\057\022\040\024\051\025\041\026\035\027\uffee\030" +
    "\uffee\031\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\001\002\000\060\002\ufff9\013\ufff9\020\057" +
    "\022\040\024\051\025\041\026\035\027\ufff9\030\055\031" +
    "\052\033\042\034\056\035\047\036\036\037\043\040\044" +
    "\041\053\042\037\043\054\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\001\002\000\060\002\ufffa\013\ufffa\020\057\022\040" +
    "\024\051\025\041\026\035\027\ufffa\030\055\031\052\033" +
    "\042\034\056\035\047\036\036\037\043\040\044\041\053" +
    "\042\037\043\054\044\ufffa\045\046\046\ufffa\047\ufffa\001" +
    "\002\000\060\002\ufff2\013\ufff2\020\057\022\040\024\051" +
    "\025\041\026\035\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034" +
    "\056\035\047\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\001\002\000" +
    "\060\002\ufff1\013\ufff1\020\057\022\040\024\051\025\041" +
    "\026\035\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\056\035" +
    "\047\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002\000\060\002" +
    "\ufff6\013\ufff6\020\057\022\040\024\051\025\041\026\035" +
    "\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034\056\035\047\036" +
    "\036\037\043\040\044\041\053\042\037\043\054\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\001\002\000\060\002\uffea\013" +
    "\uffea\020\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\001\002\000\060\002\uffec\013\uffec\020" +
    "\uffec\022\uffec\024\051\025\041\026\035\027\uffec\030\uffec" +
    "\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\001\002\000\060\002\ufff5\013\ufff5\020\057\022" +
    "\040\024\051\025\041\026\035\027\ufff5\030\ufff5\031\ufff5" +
    "\033\ufff5\034\056\035\047\036\036\037\043\040\044\041" +
    "\053\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\001\002\000\060\002\ufff3\013\ufff3\020\057\022\040\024" +
    "\051\025\041\026\035\027\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\034\056\035\047\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002" +
    "\000\060\002\uffe9\013\uffe9\020\uffe9\022\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002\000\060" +
    "\002\uffe7\013\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\001\002\000\060\002\uffe5" +
    "\013\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\001\002\000\036\010\017\011\015" +
    "\012\031\013\uffd7\014\024\015\023\017\026\020\013\022" +
    "\030\032\016\050\027\051\014\052\025\053\020\001\002" +
    "\000\054\013\uffd4\020\057\022\040\024\051\025\041\026" +
    "\035\027\uffd6\030\055\031\052\033\042\034\056\035\047" +
    "\036\036\037\043\040\044\041\053\042\037\043\054\044" +
    "\045\045\046\046\060\001\002\000\004\013\uffd8\001\002" +
    "\000\004\013\114\001\002\000\060\002\uffd9\013\uffd9\020" +
    "\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\001\002\000\004\027\116\001\002\000\034\010" +
    "\017\011\015\012\031\014\024\015\023\017\026\020\013" +
    "\022\030\032\016\050\027\051\014\052\025\053\020\001" +
    "\002\000\004\013\uffd5\001\002\000\060\002\uffd3\013\uffd3" +
    "\020\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\001\002\000\014\014\024\050\027\051\014" +
    "\052\025\053\020\001\002\000\004\013\123\001\002\000" +
    "\060\002\uffd2\013\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\060\002" +
    "\uffe4\013\uffe4\020\057\022\040\024\051\025\041\026\035" +
    "\027\uffe4\030\055\031\052\033\042\034\056\035\047\036" +
    "\036\037\043\040\044\041\053\042\037\043\054\044\045" +
    "\045\046\046\060\047\uffe4\001\002\000\060\002\uffe6\013" +
    "\uffe6\020\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\001\002\000\052\002\uffff\020\057\022" +
    "\040\024\051\025\041\026\035\030\055\031\052\033\042" +
    "\034\056\035\047\036\036\037\043\040\044\041\053\042" +
    "\037\043\054\044\045\045\046\046\060\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\011\010\001\001\000\004\002\127\001\001\000\004" +
    "\002\126\001\001\000\012\002\032\005\125\006\020\007" +
    "\031\001\001\000\002\001\001\000\012\002\032\005\021" +
    "\006\020\007\031\001\001\000\012\002\032\005\124\006" +
    "\020\007\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\032\005\123\006\020\007\031\001\001\000" +
    "\004\002\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\032\005\106\006\020\007\031" +
    "\001\001\000\002\001\001\000\012\002\032\005\105\006" +
    "\020\007\031\001\001\000\012\002\032\005\033\006\020" +
    "\007\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\032\005\104\006\020\007\031" +
    "\001\001\000\012\002\032\005\103\006\020\007\031\001" +
    "\001\000\012\002\032\005\102\006\020\007\031\001\001" +
    "\000\012\002\032\005\101\006\020\007\031\001\001\000" +
    "\012\002\032\005\100\006\020\007\031\001\001\000\012" +
    "\002\032\005\077\006\020\007\031\001\001\000\012\002" +
    "\032\005\076\006\020\007\031\001\001\000\012\002\032" +
    "\005\075\006\020\007\031\001\001\000\012\002\032\005" +
    "\074\006\020\007\031\001\001\000\012\002\032\005\073" +
    "\006\020\007\031\001\001\000\012\002\032\005\072\006" +
    "\020\007\031\001\001\000\002\001\001\000\012\002\032" +
    "\005\071\006\020\007\031\001\001\000\012\002\032\005" +
    "\070\006\020\007\031\001\001\000\012\002\032\005\067" +
    "\006\020\007\031\001\001\000\012\002\032\005\066\006" +
    "\020\007\031\001\001\000\012\002\032\005\065\006\020" +
    "\007\031\001\001\000\012\002\032\005\064\006\020\007" +
    "\031\001\001\000\012\002\032\005\063\006\020\007\031" +
    "\001\001\000\012\002\032\005\060\006\020\007\031\001" +
    "\001\000\002\001\001\000\012\002\032\005\062\006\020" +
    "\007\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\032\003\112\004\111\005\110\006\020\007\031\001\001" +
    "\000\004\012\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\032" +
    "\004\116\005\110\006\020\007\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	currFMacroArgs = new LinkedList<FeatureTree.Node>();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	// just to obtain the line/column-occurences
	Symbol currRead = getScanner().next_token();
	line = currRead.left + 1;
	column = currRead.right + 1;
	return currRead;

    }


	static class ParserException extends Exception {
		public ParserException(String msg) {
			super(msg);
		}
	}
	public int getLine() {
		return line;
	}
	public int getColumn() {
		return column;
	}
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        m = new StringBuffer();
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+ s.left);   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+ s.right);
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        //m.append(message);       
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);        
        throw new ParserException("Syntax error: " + m.toString());
    }
    	// TODO 2014-07-27 off-by-one(+1) at e.g. Var-decls, otherwise correct
	// current line where lexed symbol occured
	private int line;
	// current column where lexed symbol occured
	private int column;
	private StringBuffer m;
	// storage of analyzed function macro arguments (to be propagated to fmacro-node)
	LinkedList<Node> currFMacroArgs;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExpressionParser$actions {

	
	// init first

  private final ExpressionParser parser;

  /** Constructor */
  CUP$ExpressionParser$actions(ExpressionParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExpressionParser$do_action(
    int                        CUP$ExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpressionParser$parser,
    java.util.Stack            CUP$ExpressionParser$stack,
    int                        CUP$ExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$ExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // n_defined ::= T_DEFINED T_LPAR n_macro T_RPAR 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String lpar = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node m = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String rpar = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		m.setEmbracedByParentheses();		// for presentational reasons
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Defined(null, m, def);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_defined",5, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // n_defined ::= T_DEFINED n_macro 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node m = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		// makes #if defined A -> #if defined(A) and hence such exprs equivalent to occurrences with parentheses
		m.setEmbracedByParentheses();
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Defined(null, m, def);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_defined",5, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // n_macro_args ::= n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node expr = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		parser.currFMacroArgs.add(expr);
		RESULT = expr;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro_args",2, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // n_macro_args ::= n_expr NT$0 T_COMMA n_macro_args 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node) ((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node expr = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node args = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;

              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro_args",2, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$0 ::= 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node expr = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;

		parser.currFMacroArgs.add(expr);
		//expr.setArgs(args);
		//RESULT = new MacroArg(null, expr, );
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // n_macro_arglist ::= 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;

              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro_arglist",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // n_macro_arglist ::= n_macro_args 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node args = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = args; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro_arglist",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // n_macro ::= T_IDENTIFIER T_LPAR n_macro_arglist T_RPAR 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String lpar = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node arglist = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String rpar = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.FunctionMacro macroNode
			= new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.FunctionMacro(null, null, id);
		macroNode.setArgs(parser.currFMacroArgs);
		// prepare new argument list for following runs
		parser.currFMacroArgs = new LinkedList<FeatureTree.Node>();
		RESULT = macroNode;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // n_macro ::= T_FUNMAC_NO_PARENTHESES 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int fmacnoparleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int fmacnoparright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String fmacnopar = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
				
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Macro(null, null, fmacnopar);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // n_macro ::= T_FUNMAC_ARG_NAMESPACE 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int namespleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int namespright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String namesp = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Macro(null, null, namesp);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // n_macro ::= T_FUNMAC_ARG_LOC_HEADER 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String header = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Macro(null, null, header);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // n_macro ::= T_FUNMAC_ARG_GLOB_HEADER 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String header = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Macro(null, null, header);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // n_macro ::= T_IDENTIFIER 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Macro(null, null, id);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_macro",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // n_literal ::= T_CHAR_LIT 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.CharLiteral(null, null, lit);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_literal",4, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // n_literal ::= T_INTEGER_LIT 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.IntLiteral(null, null, lit);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_literal",4, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // n_expr ::= T_LPAR n_expr T_RPAR 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		e.setEmbracedByParentheses();		// for presentational reasons
		RESULT = e;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // n_expr ::= n_defined 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node d = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = d; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // n_expr ::= n_macro 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node m = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = m; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // n_expr ::= T_TILD n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String bn = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.UnaryBitNeg(null, e, bn);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // n_expr ::= T_LOG_NEG n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String ln = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.UnaryLogNeg(null, e, ln);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // n_expr ::= T_PLUS n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.UnaryPlus(null, e, p);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // n_expr ::= T_MINUS n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.UnaryMinus(null, e, m);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // n_expr ::= n_literal 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node l = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // n_expr ::= n_expr T_MOD n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Mod(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // n_expr ::= n_expr T_DIVIDE n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Div(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // n_expr ::= n_expr T_TIMES n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Mult(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // n_expr ::= n_expr T_MINUS n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Minus(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // n_expr ::= n_expr T_PLUS n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Plus(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // n_expr ::= n_expr T_RSHIFT n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.RShift(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n_expr ::= n_expr T_LSHIFT n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.LShift(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // n_expr ::= n_expr T_GE n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.GEq(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // n_expr ::= n_expr T_GT n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Gt(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // n_expr ::= n_expr T_LE n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.LEq(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // n_expr ::= n_expr T_LT n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Lt(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // n_expr ::= n_expr T_ANTIV n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.NEq(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // n_expr ::= n_expr T_EQUIV n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Eq(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // n_expr ::= n_expr T_AMP n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.BinAnd(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // n_expr ::= n_expr T_CARET n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.BinXor(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // n_expr ::= n_expr T_PIPE n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.BinOr(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // n_expr ::= n_expr T_LOG_AND n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.LogAnd(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // n_expr ::= n_expr T_LOG_OR n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e1 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e2 = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		RESULT = new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.LogOr(e1, e2, op);
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // n_expr ::= n_expr T_QM n_expr T_COLON n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node cond = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).value;
		int qmleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int qmright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		String qm = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int expr_tleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int expr_tright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node expr_t = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int expr_fleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expr_fright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node expr_f = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Ternary ternary
			= new de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Ternary(cond, expr_t, expr_f, qm, col);
		System.out.println(ternary);
		RESULT = ternary;	
			
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_expr",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // n_conditional_clause ::= T_IFNDEF n_macro 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree RESULT =null;
		int ifndefleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int ifndefright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String ifndef = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node m = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		FeatureTree ftree = new IfndefTree();
		ftree.setKeyword(ifndef);
		ftree.setRoot(m);
		RESULT = ftree;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_conditional_clause",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // n_conditional_clause ::= T_IFDEF n_macro 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree RESULT =null;
		int ifdefleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int ifdefright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String ifdef = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node m = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		FeatureTree ftree = new IfdefTree();
		ftree.setKeyword(ifdef);
		ftree.setRoot(m);
		RESULT = ftree;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_conditional_clause",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // n_conditional_clause ::= T_ELIF n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 
		FeatureTree ftree = new ElifTree();
		ftree.setKeyword(elif);
		ftree.setRoot(e);
		RESULT = ftree;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_conditional_clause",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // n_conditional_clause ::= T_IF n_expr 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String _if = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node e = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree.Node)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		FeatureTree ftree = new IfTree();
		ftree.setKeyword(_if);
		ftree.setRoot(e);
		RESULT = ftree;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_conditional_clause",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= n_conditional EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree start_val = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExpressionParser$parser.done_parsing();
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // n_conditional ::= T_SHARP n_conditional_clause 
            {
              de.ovgu.spldev.featurecopp.splmodel.FeatureTree RESULT =null;
		int shleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String sh = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int condclauseleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int condclauseright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		de.ovgu.spldev.featurecopp.splmodel.FeatureTree condclause = (de.ovgu.spldev.featurecopp.splmodel.FeatureTree)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
		// since we have parse seperately due to allowed whitespace between # and keyword
		// we have to complete (concat) the 'keyword' manually here :-/
		condclause.setKeyword(sh + condclause.getKeyword());
		RESULT = condclause;
	
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("n_conditional",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

